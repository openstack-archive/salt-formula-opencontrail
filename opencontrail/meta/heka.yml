{%- if pillar.opencontrail is defined %}
  {%- if pillar.opencontrail.control is defined %}
    {%- from "opencontrail/map.jinja" import control with context %}
    {%- if control.get('enabled', False) %}
      {%- set controller_ref = control %}
      {%- set control_processes = (
            'cassandra-server', 'contrail-alarm-gen', 'contrail-analytics-api',
            'contrail-api', 'contrail-collector', 'contrail-control',
            'contrail-device-manager', 'contrail-discovery', 'contrail-dns',
            'contrail-ifmap-server', 'contrail-irond', 'contrail-job-server',
            'contrail-named', 'contrail-nodemgr', 'contrail-nodemgr-config',
            'contrail-nodemgr-control', 'contrail-nodemgr-database', 'contrail-query-engine',
            'contrail-schema', 'contrail-snmp-collector', 'contrail-supervisord-analytics',
            'contrail-supervisord-config', 'contrail-supervisord-control', 'contrail-supervisord-database',
            'contrail-svc-monitor', 'contrail-topology',
            'kafka-server', 'redis-server', 'zookeeper-server'
          ) %}
    {%- endif %}
  {%- elif pillar.opencontrail.compute is defined %}
    {%- from "opencontrail/map.jinja" import compute with context %}
    {%- if compute.get('enabled', False) %}
      {%- set compute_ref = compute %}
      {%- set compute_processes = (
            'contrail-nodemgr-vrouter', 'contrail-supervisord-vrouter', 'contrail-vrouter-agent'
          ) %}
    {%- endif %}
  {%- endif %}
  {%- if pillar.opencontrail.web is defined %}
    {%- from "opencontrail/map.jinja" import web with context %}
    {%- if web.get('enabled', False) %}
      {%- set web_ref = web %}
    {%- endif %}
  {%- endif %}
{%- endif %}

{%- if controller_ref is defined or compute_ref is defined %}
log_collector:
  {%- if controller_ref is defined %}
  splitter:
    java:
      engine: regex
      delimiter: '\n([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3} - )'
      delimiter_eol: false
  {%- endif %}
  decoder:
    contrail:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/contrail_log.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      adjust_timezone: true
    contrail_supervisor:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/contrail_supervisor_log.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      adjust_timezone: true
  {%- if controller_ref is defined %}
    contrail_collector:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/contrail_collector_log.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      adjust_timezone: true
    contrail_api_stdout:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/contrail_api_stdout_log.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      adjust_timezone: true
    zookeeper:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/zookeeper.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      adjust_timezone: true
    cassandra:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/cassandra.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      adjust_timezone: true
    ifmap:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/ifmap.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      adjust_timezone: true
  {%- endif %}
  {%- if web_ref is defined %}
    redis:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/redis.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      adjust_timezone: true
  {%- endif %}
  input:
    contrail_supervisor_log:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'contrail/(?P<Service>supervisord-.+)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail', '.', 'Service']
      priority: ["^Seq"]
      decoder: "contrail_supervisor_decoder"
      splitter: "TokenSplitter"
    contrail_named_log:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'contrail/contrail-(?P<Service>named)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail', '.', 'Service']
      priority: ["^Seq"]
      decoder: "contrail_supervisor_decoder"
      splitter: "TokenSplitter"
  {%- if controller_ref is defined %}
    contrail_collector_log:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'contrail/contrail-(?P<Service>collector|control|dns|query-engine)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail', '.', 'Service']
      priority: ["^Seq"]
      decoder: "contrail_collector_decoder"
      splitter: "TokenSplitter"
    contrail_api_stdout_log:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'contrail/contrail-(?P<Service>discovery-0-stdout)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail', '.', 'Service']
      priority: ["^Seq"]
      decoder: "contrail_api_stdout_decoder"
      splitter: "TokenSplitter"
    zookeeper:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'zookeeper/(?P<Service>zookeeper)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail', '.', 'Service']
      priority: ["^Seq"]
      decoder: "zookeeper_decoder"
      splitter: "java_splitter"
    cassandra:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'cassandra/(?P<Service>system|status)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail.cassandra', '.', 'Service']
      priority: ["^Seq"]
      decoder: "cassandra_decoder"
      splitter: "java_splitter"
    ifmap:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'contrail/ifmap-(?P<Service>server.*)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail.ifmap', '.', 'Service']
      priority: ["^Seq"]
      decoder: "ifmap_decoder"
      splitter: "java_splitter"
  {%- endif %}
    contrail_main_log:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'contrail/contrail-(?P<Service>alarm-gen.*|api|.*-stderr|.*svc-monitor.*|snmp.*)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail', '.', 'Service']
      priority: ["^Seq"]
      decoder: "contrail_decoder"
      splitter: "TokenSplitter"
  {%- if web_ref is defined and web_ref.get('cache', {}).get('engine', '') == 'redis' %}
    redis_log:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'redis/(?P<Service>redis-server)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['contrail', '.', 'Service']
      priority: ["^Seq"]
      decoder: "redis_decoder"
      splitter: "TokenSplitter"
  {%- endif %}
metric_collector:
  trigger:
  {%- if controller_ref is defined %}
    contrail_api_local_endpoint:
      description: 'Contrail API is locally down'
      severity: down
      rules:
      - metric: openstack_check_local_api
        field:
          service: contrail-api
        relational_operator: '=='
        threshold: 0
        window: 60
        periods: 0
        function: last
    contrail_discovery_api_local_endpoint:
      description: 'Contrail Discovery API is locally down'
      severity: down
      rules:
      - metric: openstack_check_local_api
        field:
          service: contrail-discovery
        relational_operator: '=='
        threshold: 0
        window: 60
        periods: 0
        function: last
    contrail_collector_api_local_endpoint:
      description: 'Contrail Collector API is locally down'
      severity: down
      rules:
      - metric: openstack_check_local_api
        field:
          service: contrail-collector
        relational_operator: '=='
        threshold: 0
        window: 60
        periods: 0
        function: last
    {%- for contrail_process in control_processes %}
    {{ contrail_process|replace("-", "_") }}:
      description: "There is no {{ contrail_process }} process running"
      severity: down
      rules:
      - metric: lma_components_processes
        field:
          service: {{ contrail_process }}
        relational_operator: '=='
        threshold: 0
        window: 60
        periods: 0
        function: last
    {%- endfor %}
    xmpp_number_of_sessions_up:
      description: "There are no active XMPP sessions "
      severity: warning
      rules:
      - metric: contrail_xmpp_session_up_count
        relational_operator: '=='
        threshold: 0
        window: 100
        periods: 0
        function: min
    xmpp_number_of_sessions_down:
      description: "There are inactive XMPP sessions"
      severity: warning
      rules:
      - metric: contrail_xmpp_session_down_count
        relational_operator: '>='
        threshold: 1
        window: 100
        periods: 0
        function: min
    xmpp_number_of_sessions_lo:
      description: "There are no XMPP sessions"
      severity: warning
      rules:
      - metric: contrail_xmpp_session_count
        relational_operator: '=='
        threshold: 0
        window: 100
        periods: 0
        function: min
    xmpp_number_of_sessions_hi:
      description: "There are too many XMPP sessions"
      severity: warning
      rules:
      - metric: contrail_xmpp_session_count
        relational_operator: '=='
        threshold: 500
        window: 100
        periods: 0
        function: min
    xmpp_number_of_sessions_diff:
      description: "Number of XMPP sessions changed between checks is too high"
      severity: warning
      rules:
      - metric: contrail_xmpp_session_count
        relational_operator: '>='
        threshold: 100
        window: 100
        periods: 0
        function: diff
    vrouter_xmpp_of_sessions_lo:
      description: "There are no vrouter XMPP sessions"
      severity: warning
      rules:
      - metric: contrail_vrouter_xmpp
        relational_operator: '=='
        threshold: 0
        window: 100
        periods: 0
        function: min
    vrouter_xmpp_of_sessions_hi:
      description: "There are too many vrouter XMPP sessions"
      severity: warning
      rules:
      - metric: contrail_vrouter_xmpp
        relational_operator: '=='
        threshold: 10
        window: 100
        periods: 0
        function: min
    vrouter_xmpp_of_sessions_diff:
      description: "Number of vrouter XMPP sessions changed between checks is too high"
      severity: warning
      rules:
      - metric: contrail_vrouter_xmpp
        relational_operator: '>='
        threshold: 5
        window: 100
        periods: 0
        function: diff
    vrouter_xmpp_dns_of_sessions_lo:
      description: "There are no vrouter DNS-XMPP sessions"
      severity: warning
      rules:
      - metric: contrail_vrouter_dns_xmpp
        relational_operator: '=='
        threshold: 0
        window: 100
        periods: 0
        function: min
    vrouter_xmpp_dns_of_sessions_hi:
      description: "There are too many vrouter DNS-XMPP sessions"
      severity: warning
      rules:
      - metric: contrail_vrouter_dns_xmpp
        relational_operator: '=='
        threshold: 10
        window: 100
        periods: 0
        function: min
    vrouter_xmpp_dns_of_sessions_diff:
      description: "Number of vrouter DNS-XMPP sessions changed between checks is too high"
      severity: warning
      rules:
      - metric: contrail_vrouter_dns_xmpp
        relational_operator: '>='
        threshold: 5
        window: 100
        periods: 0
        function: diff
    vrouter_lls_sessions_lo:
      description: "There are no vrouter LLS sessions"
      severity: warning
      rules:
      - metric: contrail_vrouter_lls
        relational_operator: '=='
        threshold: 0
        window: 100
        periods: 0
        function: min
    vrouter_lls_sessions_hi:
      description: "There are too many vrouter LLS sessions"
      severity: warning
      rules:
      - metric: contrail_vrouter_lls
        relational_operator: '=='
        threshold: 10
        window: 100
        periods: 0
        function: min
    vrouter_lls_of_sessions_diff:
      description: "Number of vrouter LLS sessions changed between checks is too high"
      severity: warning
      rules:
      - metric: contrail_vrouter_lls
        relational_operator: '>='
        threshold: 5
        window: 100
        periods: 0
        function: diff
    bgp_number_of_session_lo:
      description: "There are no BGP sessions"
      severity: warning
      rules:
      - metric: contrail_bgp_session_count
        relational_operator: '=='
        threshold: 0
        window: 100
        periods: 0
        function: min
    bgp_number_of_sessions__up:
      description: "There are no active BGP sessions "
      severity: warning
      rules:
      - metric: contrail_bgp_session_up_count
        relational_operator: '=='
        threshold: 0
        window: 100
        periods: 0
        function: min
    bgp_number_of_sessions_down:
      description: "There are inactive BGP sessions"
      severity: warning
      rules:
      - metric: contrail_bgp_session_down_count
        relational_operator: '>='
        threshold: 1
        window: 100
        periods: 0
        function: min
    vrouter_flows_active:
      description: "There are too many active vrouter flows"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_active
        relational_operator: '>='
        threshold: 1200
        window: 120
        periods: 0
        function: min
    vrouter_flows_zero_active:
      description: "There are no active vrouter flows"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_active
        relational_operator: '=='
        threshold: 0
        window: 120
        periods: 0
        function: min
    vrouter_flows_created:
      description: "There are too many vrouter flows created"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_created
        relational_operator: '>='
        threshold: 1000
        window: 120
        periods: 0
        function: min
    vrouter_flows_discard:
      description: "There are too many vrouter flows discarded"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_discard
        relational_operator: '>='
        threshold: 100
        window: 120
        periods: 0
        function: min
    vrouter_flows_drop:
      description: "There are too many vrouter flows dropped"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_flow_action_drop
        relational_operator: '>='
        threshold: 100
        window: 120
        periods: 0
        function: min
    vrouter_flows_frag_err:
      description: "There are too many vrouter flows with fragment errors"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_frag_err
        relational_operator: '>='
        threshold: 100
        window: 120
        periods: 0
        function: min
    vrouter_flows_invalid_nh:
      description: "There are too many vrouter flows with invalid_nh"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_invalid_nh
        relational_operator: '>='
        threshold: 100
        window: 120
        periods: 0
        function: min
    vrouter_flows_composite_invalid_interface:
      description: "There are too many vrouter flows with composite_invalid_interface"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_composite_invalid_interface
        relational_operator: '>='
        threshold: 100
        window: 120
        periods: 0
        function: min
    vrouter_flows_invalid_label:
      description: "There are too many vrouter flows with invalid_label"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_invalid_label
        relational_operator: '>='
        threshold: 100
        window: 120
        periods: 0
        function: min
    vrouter_flows_flow_queue_limit_exceeded:
      description: "There are too many vrouter flows with queue_limit_exceeded"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_flow_queue_limit_exceeded
        relational_operator: '>='
        threshold: 100
        window: 120
        periods: 0
        function: min
    vrouter_flows_flow_table_full:
      description: "There are too many vrouter flows with table_full"
      severity: warning
      rules:
      - metric: contrail_vrouter_flows_flow_table_full
        relational_operator: '>='
        threshold: 100
        window: 120
        periods: 0
        function: min
    cassandra_cluster_endpoint_down:
      description: "Cassandra Cluster Endpoint is down"
      severity: critical
      rules:
      - metric: DownEndpointCount
        relational_operator: '>'
        threshold: 0
        window: 100
        periods: 0
        function: min
  {%- endif %}
  {%- if compute_ref is defined %}
    contrail_node_manager_api_local_endpoint:
      description: 'Contrail Node Manager API is locally down'
      severity: down
      rules:
      - metric: openstack_check_local_api
        field:
          service: contrail-node-manager
        relational_operator: '=='
        threshold: 0
        window: 60
        periods: 0
        function: last
    contrail_vrouter_api_local_endpoint:
      description: 'Contrail vrouter API is locally down'
      severity: down
      rules:
      - metric: openstack_check_local_api
        field:
          service: contrail-vrouter
        relational_operator: '=='
        threshold: 0
        window: 60
        periods: 0
        function: last
    {%- for contrail_process in compute_processes %}
    {{ contrail_process|replace("-", "_") }}:
      description: "There is no {{ contrail_process }} process running"
      severity: down
      rules:
      - metric: lma_components_processes
        field:
          service: {{ contrail_process }}
        relational_operator: '=='
        threshold: 0
        window: 60
        periods: 0
        function: last
    {%- endfor %}
  {%- endif %}
  alarm:
  {%- if controller_ref is defined %}
    contrail_api_endpoint:
      alerting: enabled
      triggers:
      - contrail_api_local_endpoint
      dimension:
        service: contrail-api-endpoint
    contrail_discovery_api_endpoint:
      alerting: enabled
      triggers:
      - contrail_discovery_api_local_endpoint
      dimension:
        service: contrail-discovery-api-endpoint
    contrail_collector_api_endpoint:
      alerting: enabled
      triggers:
      - contrail_collector_api_local_endpoint
      dimension:
        service: contrail-collector-api-endpoint
    {%- for contrail_process in control_processes %}
    {{ contrail_process|replace("-", "_") }}:
      alerting: enabled
      triggers:
      - {{ contrail_process|replace("-", "_") }}
      dimension:
        service: contrail
        node_role: control
        process: {{ contrail_process }}
    {%- endfor %}
  {%- endif %}
  {%- if compute_ref is defined %}
    contrail_node_manager_api_endpoint:
      alerting: enabled
      triggers:
      - contrail_node_manager_api_local_endpoint
      dimension:
        service: contrail-node-manager-api-endpoint
    contrail_vrouter_api_endpoint:
      alerting: enabled
      triggers:
      - contrail_vrouter_api_local_endpoint
      dimension:
        service: contrail-vrouter-api-endpoint
    {%- for contrail_process in compute_processes %}
    {{ contrail_process|replace("-", "_") }}:
      alerting: enabled
      triggers:
      - {{ contrail_process|replace("-", "_") }}
      dimension:
        service: contrail
        node_role: compute
        process: {{ contrail_process }}
    {%- endfor %}
  {%- endif %}
aggregator:
  alarm_cluster:
  {%- if controller_ref is defined %}
    contrail_api_endpoint:
      policy: availability_of_members
      alerting: enabled
      group_by: hostname
      match:
        service: contrail-api-endpoint
      members:
      - contrail_api_endpoint
      dimension:
        service: contrail-control
        nagios_host: 01-service-clusters
    contrail_discovery_api_endpoint:
      policy: availability_of_members
      alerting: enabled
      group_by: hostname
      match:
        service: contrail-discovery-api-endpoint
      members:
      - contrail_discovery_api_endpoint
      dimension:
        service: contrail-control
        nagios_host: 01-service-clusters
    contrail_collector_api_endpoint:
      policy: availability_of_members
      alerting: enabled
      group_by: hostname
      match:
        service: contrail-collector-api-endpoint
      members:
      - contrail_collector_api_endpoint
      dimension:
        service: contrail-control
        nagios_host: 01-service-clusters
    {%- for contrail_process in control_processes %}
    contrail_{{ contrail_process|replace("-", "_") }}:
      policy: availability_of_members
      alerting: enabled
      group_by: hostname
      match:
        service: contrail
        node_role: control
        process: {{ contrail_process }}
      members:
      - {{ contrail_process|replace("-", "_") }}
      dimension:
        service: contrail-control
        nagios_host: 01-service-clusters
    {%- endfor %}
    contrail_control:
      policy: highest_severity
      alerting: enabled_with_notification
      match:
        service: contrail-control
      members:
      - contrail_api_endpoint
      - contrail_discovery_api_endpoint
      - contrail_collector_api_endpoint
    {%- for contrail_process in control_processes %}
      - contrail_{{ contrail_process|replace("-", "_") }}
    {%- endfor %}
      dimension:
        cluster_name: contrail-control
        nagios_host: 00-top-clusters
  {%- endif %}
  {%- if compute_ref is defined %}
    contrail_node_manager_api_endpoint:
      policy: availability_of_members
      alerting: enabled
      group_by: hostname
      match:
        service: contrail-node-manager-api-endpoint
      members:
      - contrail_node_manager_api_endpoint
      dimension:
        service: contrail-compute
        nagios_host: 01-service-clusters
    contrail_vrouter_api_endpoint:
      policy: availability_of_members
      alerting: enabled
      group_by: hostname
      match:
        service: contrail-vrouter-api-endpoint
      members:
      - contrail_vrouter_api_endpoint
      dimension:
        service: contrail-compute
        nagios_host: 01-service-clusters
    {%- for contrail_process in compute_processes %}
    contrail_{{ contrail_process|replace("-", "_") }}:
      policy: availability_of_members
      alerting: enabled
      group_by: hostname
      match:
        service: contrail
        node_role: compute
        process: {{ contrail_process }}
      members:
      - {{ contrail_process|replace("-", "_") }}
      dimension:
        service: contrail-compute
        nagios_host: 01-service-clusters
    {%- endfor %}
    contrail_compute:
      policy: highest_severity
      alerting: enabled_with_notification
      match:
        service: contrail-compute
      members:
      - contrail_node_manager_api_endpoint
      - contrail_vrouter_api_endpoint
    {%- for contrail_process in compute_processes %}
      - contrail_{{ contrail_process|replace("-", "_") }}
    {%- endfor %}
      dimension:
        cluster_name: contrail-compute
        nagios_host: 00-top-clusters
  {%- endif %}
{%- endif %}
